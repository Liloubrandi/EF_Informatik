"use strict";(self.webpackChunkef_website_template=self.webpackChunkef_website_template||[]).push([[793],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9434:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={},i=void 0,s={unversionedId:"Netzwerke/APIs",id:"Netzwerke/APIs",title:"APIs",description:"Cheatsheet APIs",source:"@site/docs/Netzwerke/APIs.md",sourceDirName:"Netzwerke",slug:"/Netzwerke/APIs",permalink:"/EF_Informatik/docs/Netzwerke/APIs",draft:!1,editUrl:"https://github.com/Liloubrandi/EF_Informatik/tree/main/docs/Netzwerke/APIs.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Knobelw\xfcrfel",permalink:"/EF_Informatik/docs/IoT-Day/knobelw\xfcrfel"},next:{title:"about-me",permalink:"/EF_Informatik/docs/about-me"}},l={},u=[{value:"Cheatsheet APIs",id:"cheatsheet-apis",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"cheatsheet-apis"},"Cheatsheet APIs"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Was ist eine API?"),"\nEine API ist ein Programm, welches auf dem Server l\xe4uft und auf Nachfragen des Clients warten. Nach einer Nachfrage \xfcbermittelt die API die n\xf6tigen, gefundenen Daten."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"JSON Format"),'\nJavaScript Object Notation. Ist eine Art die Daten im Body zu formatieren und basiert auf dem Key-Value System. -> Format: {"key": "value"}'),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"XML Format"),"\nExtensible Markup Language. Ist eine Art die Daten im Body zu formatieren und basiert auf Root- und Childnotes (\xfcbergeordnete und untergeordnete Nodes). -> Format: ",(0,a.kt)("rootnodes",null,"<value_tag/childnode>value</value_tag/childnode>")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"HTTP request"),'\nHTTP = Hypertext Transfer Protocol -> ist ein Protokoll. Das ist eine Nachfrage nach Daten von Client an den Server (Request-Response Cycle zwischen Client und Server), welcher mit der "Sprache" HTTP \xfcbertragen wird.'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"URL: Adresse"),(0,a.kt)("li",{parentName:"ul"},"Methoden: Art des Requests\nGET: Fordert den Server auf, eine Ressource abzurufen\nPOST: Eine neue Ressource kreieren\nPUT: Eine vorhandene Ressource bearbeiten/aktualisiseren\nDELETE: Eine Ressource zu l\xf6schen"),(0,a.kt)("li",{parentName:"ul"},'Headers: Metadaten des Requests - welche Art von Ger\xe4t wird verwendet("User-agent")'),(0,a.kt)("li",{parentName:"ul"},"Body: eigentliche Daten (oft in JSON (XML))")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"HTTP statuscodes"),"\nCodes, um auf einen Request zu antworten. Jeder Code hat eine andere Bedeutung, z.B.:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"404: Ressource nicht gefunden"),(0,a.kt)("li",{parentName:"ul"},"200: Alles OK"),(0,a.kt)("li",{parentName:"ul"},"401: Zugriff verweigert")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Endpunkte"),"\nLetzter Schritt nach Anfrage bevor eine Antwort kommt. (Nur auf dem Server, nach allen Slashs in der URL)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Polling"),"\nDas wiederholte Requesten eines Updates der Daten vom Client.\n-> Long Polling: Der Client requestet ein Update und der Server antwortet erst, wenn es Update gibt, um effizienter zu sein."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Integration"),"\nWenn zwei Syteme (Websites, Desktops, Smartphones) \xfcber eine API verbunden sind. Bei einer Integration hat es immer zwei Seiten - den Server und den Client."))}p.isMDXComponent=!0}}]);