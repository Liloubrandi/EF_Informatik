"use strict";(self.webpackChunkef_website_template=self.webpackChunkef_website_template||[]).push([[548],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>c});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=d(e,["components","mdxType","originalType","parentName"]),m=s(t),c=i,g=m["".concat(l,".").concat(c)]||m[c]||p[c]||a;return t?r.createElement(g,o(o({ref:n},u),{},{components:t})):r.createElement(g,o({ref:n},u))}));function c(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d.mdxType="string"==typeof e?e:i,o[1]=d;for(var s=2;s<a;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5569:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>d,toc:()=>s});var r=t(7462),i=(t(7294),t(3905));const a={},o=void 0,d={unversionedId:"Netzwerke/Blogbeitrag_APIs",id:"Netzwerke/Blogbeitrag_APIs",title:"Blogbeitrag_APIs",description:"Blogbeitrag - Erstellen einer API mit Node-Red",source:"@site/docs/Netzwerke/Blogbeitrag_APIs.md",sourceDirName:"Netzwerke",slug:"/Netzwerke/Blogbeitrag_APIs",permalink:"/EF_Informatik/docs/Netzwerke/Blogbeitrag_APIs",draft:!1,editUrl:"https://github.com/Liloubrandi/EF_Informatik/tree/main/docs/Netzwerke/Blogbeitrag_APIs.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"APIs",permalink:"/EF_Informatik/docs/Netzwerke/APIs"},next:{title:"about-me",permalink:"/EF_Informatik/docs/about-me"}},l={},s=[{value:"Blogbeitrag - Erstellen einer API mit Node-Red",id:"blogbeitrag---erstellen-einer-api-mit-node-red",level:2}],u={toc:s};function p(e){let{components:n,...a}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"blogbeitrag---erstellen-einer-api-mit-node-red"},"Blogbeitrag - Erstellen einer API mit Node-Red"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Anleitung:"),(0,i.kt)("br",{parentName:"p"}),"\n","Zuerst musst du Node-Red \xf6ffnen und dort einen neuen Flow erstellen. In diesen Flow verbindest du dann ein ",(0,i.kt)("inlineCode",{parentName:"p"},"http in"),"-node \xfcber einen ",(0,i.kt)("inlineCode",{parentName:"p"},"function"),"-node mit einem ",(0,i.kt)("inlineCode",{parentName:"p"},"http response"),"-node. Jeweils am ",(0,i.kt)("inlineCode",{parentName:"p"},"http in"),"und am ",(0,i.kt)("inlineCode",{parentName:"p"},"http response")," befestigst du noch einen ",(0,i.kt)("inlineCode",{parentName:"p"},"debug"),"-node. Dein Flow sollte nun so aussehen:\n",(0,i.kt)("img",{alt:"Grundstruktur",src:t(776).Z,width:"584",height:"124"}),(0,i.kt)("br",{parentName:"p"}),"\n","Zwei dieser Nodes sollten nun noch bearbeitet werden (die anderen kannst du wahlweise umbenennen). Beim ",(0,i.kt)("inlineCode",{parentName:"p"},"http in"),"-node solltest du mit Doppelklick auf den Node ein Fenster \xf6ffnen k\xf6nnen, bei dem du die GET-Methode einstellen kannst und bei der URL den Endpunkt (Beim Beispiel mit dem Text, der in Emojis verwandelt wird, k\xf6nnte dieser so lauten: ",(0,i.kt)("inlineCode",{parentName:"p"},"/api/to-emoji-lang"),") eingeben kannst. Zum Schluss muss noch der ",(0,i.kt)("inlineCode",{parentName:"p"},"function"),"-node bearbeitet werden. Auch wieder durch Doppelklick \xf6ffnen und dann folgenden Code hineinschreiben/-kopieren."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"let emoji = msg.payload.text;\n\nemoji = emoji.replace(/hello/, '\ud83d\udc4b');\n\nmsg.payload = {\n    msg: emoji\n};\n\nreturn msg;\n")),(0,i.kt)("p",null,'Nach der zweiten Zeile kann die zweite Zeile noch beliebig oft wiederholt werden (einfach mit anderen W\xf6rtern anstelle von "hello" und anderen Emojis anstelle von "\ud83d\udc4b" (auf Emojis zugreifen mit',(0,i.kt)("inlineCode",{parentName:"p"},"windows"),"+ ",(0,i.kt)("inlineCode",{parentName:"p"},"punkt"),')), um auch weitere W\xf6rter in die Emojisprache umzuwandeln. Die zweite Zeile kann auch noch mit "gi" hinter dem "hello" (Bsp: emoji = emoji.replace(/hello/gi, \'\ud83d\udc4b\');) erweitert werden, damit die Gross- und Kleinschreibung vom Wort "hello" keine Rolle mehr spielt und man nicht jede M\xf6glichkeit auflisten muss. Dann nur noch deployen und die Seite mit dem Endpunkt abfragen (Bsp von mir: ',(0,i.kt)("a",{parentName:"p",href:"https://node-red-2e5h.onrender.com/api/to-emoji-lang"},"https://node-red-2e5h.onrender.com/api/to-emoji-lang"),") und den zu \xfcbersetzenden Text als Value des Keys ",(0,i.kt)("inlineCode",{parentName:"p"},"text")," weitergeben (Achtung: Bei mir heisst der Key nicht ",(0,i.kt)("inlineCode",{parentName:"p"},"text")," sondern ",(0,i.kt)("inlineCode",{parentName:"p"},"message")," und muss folglich auch im Codeblock oben zu ",(0,i.kt)("inlineCode",{parentName:"p"},"msg.payload.message")," ge\xe4ndert werden).\nVoila, du hast gerade deine erste API erstellt! \ud83c\udf89"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Erkl\xe4rung:"),(0,i.kt)("br",{parentName:"p"}),"\n","Wie oben erw\xe4hnt, benutzen wir einen ",(0,i.kt)("inlineCode",{parentName:"p"},"http in"),"-node mit der Methode GET und einem Endpunkt. Die Methode GET sagt dir, dass die API auf eine Ressource zugreifen soll. Der Enpunkt verr\xe4t der API wo sie alle n\xf6tigen Informationen findet und ist der Pfad, dessen, auf das die API zugreifen soll. (In diesem Fall eben auf den Code, der sagt, wie ein Text umge\xe4ndert werden soll in Emojis vor dem zur\xfcckschicken)"),(0,i.kt)("p",null,"Vielleicht hast du es schon erraten. Der ",(0,i.kt)("inlineCode",{parentName:"p"},"fuction"),"-node beinhaltet den Funktionscode, der die Anweisungen enth\xe4lt wie der Text in Emojisprache umgewandelt werden kann. Die Funktion ist also der eigentlich wichtige Teil der API, wo das umwandeln geschieht."),(0,i.kt)("p",null,"Allgemein zum Ablauf kann man sagen, dass die API (durch die GET-Methode) auf eine Ressource zugreift, diese dann nach Angaben in der Funktion ver\xe4ndert und ver\xe4ndert zur\xfcckgibt."),(0,i.kt)("p",null,"Die angeschlossenen ",(0,i.kt)("inlineCode",{parentName:"p"},"Debug"),'-nodes sind dabei nur da, um auszugeben/aufzuschreiben, was genau geholt, respektive zur\xfcckgeschickt wird und wird dann angezeigt. (Quasi Funktion wie "print")'),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Erfahrung:"),(0,i.kt)("br",{parentName:"p"}),"\n","Zuerst wusste ich gar nicht richtig, dass das was wir gemacht haben eine API konstruieren ist. Erst als ich begonnen habe, diesen Blog zu schreiben und daf\xfcr die Aufgabe noch einmal durchgeschaut habe, ist mir aufgefallen, was die API ist - n\xe4mlich das Programm in Node-Red, welches wir gemacht haben, um Text in Emojisprache umzuwandeln. Schwer war es f\xfcr mich nicht, diese API zu konstruieren und zu verstehen, nur habe ich den Zusammenhang zwischen der Aufgabe und der API-Konstruktion zuerst nicht gemacht."))}p.isMDXComponent=!0},776:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/APImitNode-RedGrundstruktur-b4db1e66d7c498c1ddb98b1c74e7ba7a.PNG"}}]);